import React, { useEffect, useState } from 'react';
import { telegramService } from '../services/telegramService';

declare global {
  interface Window {
    Telegram?: {
      WebApp: any;
    };
  }
}

export const TelegramMiniApp: React.FC = () => {
  const [tg, setTg] = useState<any>(null);
  const [user, setUser] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤–Ω—É—Ç—Ä–∏ Telegram
    if (!window.Telegram?.WebApp) {
      setError('–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–æ –≤–Ω—É—Ç—Ä–∏ Telegram');
      setLoading(false);
      return;
    }

    const telegram = window.Telegram.WebApp;
    setTg(telegram);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    telegram.ready();
    telegram.expand();

    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç–∞ —Ç–µ–º—ã
    telegram.setHeaderColor('#1e40af');
    telegram.setBackgroundColor('#ffffff');

    // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    initUser(telegram);
  }, []);

  const initUser = async (telegram: any) => {
    try {
      const initData = telegram.initData;
      const initDataUnsafe = telegram.initDataUnsafe;

      if (!initData || !initDataUnsafe.user) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }

      // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
      const response = await telegramService.initMiniApp(initData, initDataUnsafe);
      
      setUser(response.user);
      
      // –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
      telegram.MainButton.text = '–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç—ã';
      telegram.MainButton.show();
      telegram.MainButton.onClick(() => {
        // –ü–µ—Ä–µ–π—Ç–∏ –∫ —á–∞—Ç–∞–º
        window.location.hash = '/chats';
      });

    } catch (err: any) {
      console.error('Init error:', err);
      setError(err.message || '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
    } finally {
      setLoading(false);
    }
  };

  const handleOpenChat = (chatId: string) => {
    if (tg) {
      tg.sendData(JSON.stringify({ action: 'open_chat', chatId }));
      tg.close();
    }
  };

  const handleShowSettings = () => {
    if (tg) {
      tg.showPopup({
        title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
        message: '–û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–≤–µ—Ä—Å–∏—é –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º',
        buttons: [
          { id: 'open', type: 'default', text: '–û—Ç–∫—Ä—ã—Ç—å' },
          { id: 'cancel', type: 'cancel' }
        ]
      }, (buttonId: string) => {
        if (buttonId === 'open') {
          tg.openLink(window.location.origin);
        }
      });
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-screen bg-gray-50">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
          <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex items-center justify-center h-screen bg-gray-50">
        <div className="text-center max-w-md px-4">
          <div className="text-red-500 text-5xl mb-4">‚ö†Ô∏è</div>
          <h2 className="text-xl font-bold mb-2">–û—à–∏–±–∫–∞</h2>
          <p className="text-gray-600">{error}</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 pb-20">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="bg-blue-700 text-white p-6 shadow-lg">
        <div className="flex items-center space-x-4">
          {user?.avatar && (
            <img 
              src={user.avatar} 
              alt="Avatar" 
              className="w-16 h-16 rounded-full border-2 border-white"
            />
          )}
          <div>
            <h1 className="text-2xl font-bold">Stogram</h1>
            <p className="text-blue-100">
              –ü—Ä–∏–≤–µ—Ç, {user?.displayName || user?.username}!
            </p>
          </div>
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="p-4 space-y-4">
        {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
        <div className="bg-white rounded-lg shadow p-4">
          <h2 className="text-lg font-semibold mb-3">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h2>
          <div className="grid grid-cols-2 gap-3">
            <button 
              onClick={() => handleOpenChat('new')}
              className="p-4 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition"
            >
              <div className="text-2xl mb-1">üí¨</div>
              <div className="text-sm">–ù–æ–≤—ã–π —á–∞—Ç</div>
            </button>
            
            <button 
              onClick={handleShowSettings}
              className="p-4 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition"
            >
              <div className="text-2xl mb-1">‚öôÔ∏è</div>
              <div className="text-sm">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</div>
            </button>
          </div>
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="bg-white rounded-lg shadow p-4">
          <h2 className="text-lg font-semibold mb-3">–í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</h2>
          <div className="grid grid-cols-3 gap-4 text-center">
            <div>
              <div className="text-2xl font-bold text-blue-600">0</div>
              <div className="text-xs text-gray-600">–ß–∞—Ç—ã</div>
            </div>
            <div>
              <div className="text-2xl font-bold text-green-600">0</div>
              <div className="text-xs text-gray-600">–°–æ–æ–±—â–µ–Ω–∏—è</div>
            </div>
            <div>
              <div className="text-2xl font-bold text-purple-600">0</div>
              <div className="text-xs text-gray-600">–ö–æ–Ω—Ç–∞–∫—Ç—ã</div>
            </div>
          </div>
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ */}
        <div className="bg-blue-50 rounded-lg p-4">
          <h3 className="font-semibold text-blue-900 mb-2">
            üîó Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞
          </h3>
          <p className="text-sm text-blue-700">
            –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
          </p>
        </div>

        {/* –§—É–Ω–∫—Ü–∏–∏ Mini App */}
        <div className="bg-white rounded-lg shadow p-4">
          <h2 className="text-lg font-semibold mb-3">–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏</h2>
          <ul className="space-y-2 text-sm text-gray-700">
            <li className="flex items-center space-x-2">
              <span className="text-green-500">‚úì</span>
              <span>–û—Ç–ø—Ä–∞–≤–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π</span>
            </li>
            <li className="flex items-center space-x-2">
              <span className="text-green-500">‚úì</span>
              <span>Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</span>
            </li>
            <li className="flex items-center space-x-2">
              <span className="text-green-500">‚úì</span>
              <span>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–∞—Ç–æ–≤</span>
            </li>
            <li className="flex items-center space-x-2">
              <span className="text-green-500">‚úì</span>
              <span>–û–±–º–µ–Ω —Ñ–∞–π–ª–∞–º–∏</span>
            </li>
          </ul>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ */}
        <button
          onClick={() => tg?.openLink(window.location.origin)}
          className="w-full py-3 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-lg font-semibold hover:from-blue-600 hover:to-purple-700 transition"
        >
          –û—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é
        </button>
      </div>
    </div>
  );
};
