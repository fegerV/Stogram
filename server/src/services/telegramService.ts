import TelegramBot from 'node-telegram-bot-api';
import crypto from 'crypto';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

class TelegramService {
  private bot: TelegramBot | null = null;
  private botToken: string | undefined;
  private botUsername: string | undefined;

  constructor() {
    this.botToken = process.env.TELEGRAM_BOT_TOKEN;
    this.botUsername = process.env.TELEGRAM_BOT_USERNAME;

    if (this.botToken) {
      this.initializeBot();
    }
  }

  private initializeBot() {
    if (!this.botToken) return;

    const useWebhook = process.env.TELEGRAM_USE_WEBHOOK === 'true';
    
    if (useWebhook) {
      this.bot = new TelegramBot(this.botToken, { webHook: true });
      const webhookUrl = process.env.TELEGRAM_WEBHOOK_URL;
      if (webhookUrl) {
        this.bot.setWebHook(webhookUrl);
      }
    } else {
      this.bot = new TelegramBot(this.botToken, { polling: true });
    }

    this.setupBotHandlers();
  }

  private setupBotHandlers() {
    if (!this.bot) return;

    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.onText(/\/start/, async (msg) => {
      const chatId = msg.chat.id;
      const telegramUserId = msg.from?.id.toString();

      if (!telegramUserId) return;

      const user = await prisma.user.findFirst({
        where: { telegramId: telegramUserId }
      });

      if (user) {
        await this.bot?.sendMessage(
          chatId,
          `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.displayName || user.username}!\n\n` +
          `–í—ã —É–∂–µ —Å–≤—è–∑–∞–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç Stogram —Å Telegram.\n\n` +
          `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
          `/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞\n` +
          `/notifications - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏\n` +
          `/bridge - –°–æ–∑–¥–∞—Ç—å –º–æ—Å—Ç –¥–ª—è —á–∞—Ç–∞\n` +
          `/help - –ü–æ–º–æ—â—å`
        );
      } else {
        await this.bot?.sendMessage(
          chatId,
          `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Stogram Bot!\n\n` +
          `–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Stogram.\n\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Telegram Login –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫.`
        );
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /status
    this.bot.onText(/\/status/, async (msg) => {
      const chatId = msg.chat.id;
      const telegramUserId = msg.from?.id.toString();

      if (!telegramUserId) return;

      const user = await prisma.user.findFirst({
        where: { telegramId: telegramUserId },
        include: {
          telegramBridges: {
            where: { isActive: true }
          }
        }
      });

      if (!user) {
        await this.bot?.sendMessage(
          chatId,
          `‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ —Å–≤—è–∑–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ Telegram Login.`
        );
        return;
      }

      const activeBridges = user.telegramBridges.length;

      await this.bot?.sendMessage(
        chatId,
        `üìä –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞\n\n` +
        `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.displayName || user.username}\n` +
        `üìß Email: ${user.email}\n` +
        `üîó –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ—Å—Ç–æ–≤: ${activeBridges}\n` +
        `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${user.telegramNotifications ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}\n` +
        `üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: ${user.telegramSyncMessages ? '‚úÖ –í–∫–ª—é—á–µ–Ω–∞' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}`
      );
    });

    // –ö–æ–º–∞–Ω–¥–∞ /notifications
    this.bot.onText(/\/notifications (on|off)/, async (msg, match) => {
      const chatId = msg.chat.id;
      const telegramUserId = msg.from?.id.toString();
      const action = match?.[1];

      if (!telegramUserId || !action) return;

      const user = await prisma.user.findFirst({
        where: { telegramId: telegramUserId }
      });

      if (!user) {
        await this.bot?.sendMessage(
          chatId,
          `‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ —Å–≤—è–∑–∞–Ω.`
        );
        return;
      }

      const enabled = action === 'on';
      await prisma.user.update({
        where: { id: user.id },
        data: { telegramNotifications: enabled }
      });

      await this.bot?.sendMessage(
        chatId,
        `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${enabled ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}`
      );
    });

    // –ö–æ–º–∞–Ω–¥–∞ /bridge
    this.bot.onText(/\/bridge/, async (msg) => {
      const chatId = msg.chat.id;
      await this.bot?.sendMessage(
        chatId,
        `üåâ –°–æ–∑–¥–∞–Ω–∏–µ –º–æ—Å—Ç–∞ –¥–ª—è —á–∞—Ç–æ–≤\n\n` +
        `–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ—Å—Ç–∞ –º–µ–∂–¥—É Telegram —á–∞—Ç–æ–º –∏ Stogram:\n` +
        `1. –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É Telegram\n` +
        `2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Stogram –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ—Å—Ç–∞\n` +
        `3. –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç Stogram –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏\n\n` +
        `–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è.`
      );
    });

    // –ö–æ–º–∞–Ω–¥–∞ /help
    this.bot.onText(/\/help/, async (msg) => {
      const chatId = msg.chat.id;
      await this.bot?.sendMessage(
        chatId,
        `üìö –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n\n` +
        `/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n` +
        `/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞\n` +
        `/notifications on|off - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏\n` +
        `/bridge - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ—Å—Ç–∞—Ö –¥–ª—è —á–∞—Ç–æ–≤\n` +
        `/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n` +
        `–î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Stogram.`
      );
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–æ—Å—Ç–æ–≤
    this.bot.on('message', async (msg) => {
      if (msg.text?.startsWith('/')) return; // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã

      const telegramChatId = msg.chat.id.toString();
      const telegramUserId = msg.from?.id.toString();

      if (!telegramUserId) return;

      // –ù–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
      const bridge = await prisma.telegramChatBridge.findFirst({
        where: {
          telegramChatId,
          isActive: true,
          syncDirection: {
            in: ['TELEGRAM_TO_STOGRAM', 'BIDIRECTIONAL']
          }
        },
        include: {
          user: true
        }
      });

      if (bridge && msg.text) {
        await this.syncMessageToStogram(bridge, msg);
      }
    });
  }

  async sendNotification(
    telegramUserId: string,
    message: string,
    options?: TelegramBot.SendMessageOptions
  ): Promise<boolean> {
    if (!this.bot) {
      console.error('Telegram bot not initialized');
      return false;
    }

    try {
      await this.bot.sendMessage(telegramUserId, message, {
        parse_mode: 'Markdown',
        ...options
      });
      return true;
    } catch (error) {
      console.error('Telegram notification error:', error);
      return false;
    }
  }

  verifyTelegramAuth(data: any): boolean {
    if (!this.botToken) return false;

    const secret = crypto
      .createHash('sha256')
      .update(this.botToken)
      .digest();

    const { hash, ...items } = data;
    const dataCheckString = Object.keys(items)
      .sort()
      .map(k => `${k}=${items[k]}`)
      .join('\n');

    const hmac = crypto
      .createHmac('sha256', secret)
      .update(dataCheckString)
      .digest('hex');

    return hmac === hash;
  }

  async linkTelegramAccount(
    userId: string,
    telegramData: {
      id: string;
      first_name?: string;
      last_name?: string;
      username?: string;
      photo_url?: string;
      auth_date: number;
    }
  ) {
    return await prisma.user.update({
      where: { id: userId },
      data: {
        telegramId: telegramData.id,
        telegramUsername: telegramData.username,
        telegramFirstName: telegramData.first_name,
        telegramLastName: telegramData.last_name,
        telegramPhotoUrl: telegramData.photo_url,
        telegramAuthDate: new Date(telegramData.auth_date * 1000),
        telegramNotifications: true,
      }
    });
  }

  async unlinkTelegramAccount(userId: string) {
    return await prisma.user.update({
      where: { id: userId },
      data: {
        telegramId: null,
        telegramUsername: null,
        telegramFirstName: null,
        telegramLastName: null,
        telegramPhotoUrl: null,
        telegramAuthDate: null,
        telegramNotifications: false,
        telegramSyncMessages: false,
        telegramSyncProfile: false,
      }
    });
  }

  async createChatBridge(
    userId: string,
    stogramChatId: string,
    telegramChatId: string,
    telegramChatType: string,
    syncDirection: 'TELEGRAM_TO_STOGRAM' | 'STOGRAM_TO_TELEGRAM' | 'BIDIRECTIONAL' = 'BIDIRECTIONAL'
  ) {
    return await prisma.telegramChatBridge.create({
      data: {
        userId,
        stogramChatId,
        telegramChatId,
        telegramChatType,
        syncDirection,
        isActive: true
      }
    });
  }

  async removeChatBridge(bridgeId: string) {
    return await prisma.telegramChatBridge.delete({
      where: { id: bridgeId }
    });
  }

  async toggleChatBridge(bridgeId: string, isActive: boolean) {
    return await prisma.telegramChatBridge.update({
      where: { id: bridgeId },
      data: { isActive }
    });
  }

  async syncMessageToStogram(bridge: any, telegramMessage: TelegramBot.Message) {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –±—ã–ª–æ –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
      const existingSync = await prisma.telegramMessageSync.findUnique({
        where: {
          bridgeId_telegramMessageId: {
            bridgeId: bridge.id,
            telegramMessageId: telegramMessage.message_id.toString()
          }
        }
      });

      if (existingSync) return;

      // –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Stogram
      const message = await prisma.message.create({
        data: {
          content: telegramMessage.text || '',
          type: 'TEXT',
          senderId: bridge.userId,
          chatId: bridge.stogramChatId,
          isSent: true
        }
      });

      // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
      await prisma.telegramMessageSync.create({
        data: {
          bridgeId: bridge.id,
          stogramMessageId: message.id,
          telegramMessageId: telegramMessage.message_id.toString(),
          direction: 'TELEGRAM_TO_STOGRAM'
        }
      });

      // –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      await prisma.telegramChatBridge.update({
        where: { id: bridge.id },
        data: { lastSyncAt: new Date() }
      });

      return message;
    } catch (error) {
      console.error('Error syncing message to Stogram:', error);
      throw error;
    }
  }

  async syncMessageToTelegram(
    bridgeId: string,
    stogramMessage: any
  ) {
    try {
      const bridge = await prisma.telegramChatBridge.findUnique({
        where: { id: bridgeId }
      });

      if (!bridge || !bridge.isActive) {
        throw new Error('Bridge not found or inactive');
      }

      if (
        bridge.syncDirection !== 'STOGRAM_TO_TELEGRAM' &&
        bridge.syncDirection !== 'BIDIRECTIONAL'
      ) {
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –±—ã–ª–æ –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
      const existingSync = await prisma.telegramMessageSync.findFirst({
        where: {
          bridgeId: bridge.id,
          stogramMessageId: stogramMessage.id
        }
      });

      if (existingSync) return;

      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
      const sentMessage = await this.bot?.sendMessage(
        bridge.telegramChatId,
        stogramMessage.content || ''
      );

      if (sentMessage) {
        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        await prisma.telegramMessageSync.create({
          data: {
            bridgeId: bridge.id,
            stogramMessageId: stogramMessage.id,
            telegramMessageId: sentMessage.message_id.toString(),
            direction: 'STOGRAM_TO_TELEGRAM'
          }
        });

        // –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        await prisma.telegramChatBridge.update({
          where: { id: bridge.id },
          data: { lastSyncAt: new Date() }
        });
      }

      return sentMessage;
    } catch (error) {
      console.error('Error syncing message to Telegram:', error);
      throw error;
    }
  }

  async createMiniAppSession(
    userId: string,
    telegramUserId: string,
    initData: string,
    initDataUnsafe: any
  ) {
    const expiresAt = new Date();
    expiresAt.setHours(expiresAt.getHours() + 24); // 24 —á–∞—Å–∞

    return await prisma.telegramMiniAppSession.create({
      data: {
        userId,
        telegramUserId,
        initData,
        initDataUnsafe: JSON.stringify(initDataUnsafe),
        queryId: initDataUnsafe.query_id,
        platform: initDataUnsafe.platform,
        version: initDataUnsafe.version,
        isActive: true,
        expiresAt
      }
    });
  }

  async validateMiniAppData(initData: string): boolean {
    if (!this.botToken) return false;

    try {
      const urlParams = new URLSearchParams(initData);
      const hash = urlParams.get('hash');
      urlParams.delete('hash');

      const dataCheckString = Array.from(urlParams.entries())
        .sort(([a], [b]) => a.localeCompare(b))
        .map(([key, value]) => `${key}=${value}`)
        .join('\n');

      const secret = crypto
        .createHmac('sha256', 'WebAppData')
        .update(this.botToken)
        .digest();

      const calculatedHash = crypto
        .createHmac('sha256', secret)
        .update(dataCheckString)
        .digest('hex');

      return hash === calculatedHash;
    } catch (error) {
      console.error('Error validating mini app data:', error);
      return false;
    }
  }

  processWebhookUpdate(update: TelegramBot.Update) {
    if (!this.bot) return;
    this.bot.processUpdate(update);
  }

  getBotInfo() {
    return {
      username: this.botUsername,
      isInitialized: this.bot !== null
    };
  }
}

export default new TelegramService();
