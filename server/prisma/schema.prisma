generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String     @id @default(uuid())
  email             String     @unique
  username          String     @unique
  password          String
  displayName       String?
  avatar            String?
  bio               String?
  status            UserStatus @default(OFFLINE)
  lastSeen          DateTime   @default(now())
  emailVerified     Boolean    @default(false)
  verificationToken String?
  pushSubscription  String?
  theme             String?    @default("light")
  showOnlineStatus  Boolean    @default(true)
  showProfilePhoto  Boolean    @default(true)
  showLastSeen      Boolean    @default(true)
  
  // Telegram Integration
  telegramId               String?  @unique
  telegramUsername         String?
  telegramFirstName        String?
  telegramLastName         String?
  telegramPhotoUrl         String?
  telegramAuthDate         DateTime?
  telegramNotifications    Boolean  @default(false)
  telegramSyncMessages     Boolean  @default(false)
  telegramSyncProfile      Boolean  @default(false)
  
  // Security enhancements
  twoFactorEnabled  Boolean    @default(false)
  twoFactorSecret   String?
  backupCodes       String[]   @default([])
  failedLoginAttempts Int      @default(0)
  lockedUntil       DateTime?
  trustedIPs        String[]   @default([])
  
  // E2E Encryption
  publicKey         String?
  encryptedPrivateKey String?
  
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  sentMessages     Message[]         @relation("MessageSender")
  chatMembers      ChatMember[]
  calls            Call[]            @relation("CallInitiator")
  callParticipants CallParticipant[]
  contacts         Contact[]         @relation("UserContacts")
  contactOf        Contact[]         @relation("ContactUser")
  reactions        Reaction[]
  blockedUsers     BlockedUser[]     @relation("BlockingUser")
  blockedBy        BlockedUser[]     @relation("BlockedUser")
  chatSettings     ChatSettings[]
  folders          Folder[]
  pinnedMessages   PinnedMessage[]
  telegramBridges  TelegramChatBridge[]
  securityLogs     SecurityLog[]
  ipBlacklist      IPBlacklist[]
  themes           UserTheme[]

  @@index([email])
  @@index([username])
  @@index([verificationToken])
  @@index([telegramId])
}

enum UserStatus {
  ONLINE
  OFFLINE
  AWAY
  DO_NOT_DISTURB
}

model Chat {
  id          String   @id @default(uuid())
  name        String?
  type        ChatType
  avatar      String?
  description String?
  isSecret    Boolean  @default(false)
  
  // E2E Encryption keys
  encryptionKeyId String?
  encryptionType  String? @default("none") // none, e2e
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members        ChatMember[]
  messages       Message[]
  calls          Call[]
  chatSettings   ChatSettings[]
  pinnedMessages PinnedMessage[]
  encryptionKeys ChatEncryptionKey[]

  @@index([type])
  @@index([isSecret])
}

enum ChatType {
  PRIVATE
  GROUP
  CHANNEL
}

model ChatMember {
  id       String     @id @default(uuid())
  userId   String
  chatId   String
  role     MemberRole @default(MEMBER)
  joinedAt DateTime   @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId])
  @@index([userId])
  @@index([chatId])
}

enum MemberRole {
  OWNER
  ADMIN
  MEMBER
}

model Message {
  id           String      @id @default(uuid())
  content      String?
  type         MessageType @default(TEXT)
  senderId     String
  chatId       String
  replyToId    String?
  fileUrl      String?
  fileName     String?
  fileSize     Int?
  thumbnailUrl String?
  duration     Int?
  waveform     String?
  stickerId    String?
  isEdited     Boolean     @default(false)
  isDeleted    Boolean     @default(false)
  isSilent     Boolean     @default(false)
  scheduledFor DateTime?
  isSent       Boolean     @default(false)
  mentions     String[]    @default([])
  hashtags     String[]    @default([])
  
  // E2E Encryption
  isEncrypted  Boolean     @default(false)
  encryptedContent String?
  encryptionKeyId  String?
  
  // Media processing
  isCompressed Boolean     @default(false)
  originalFileUrl String?
  videoFormats String?     // JSON array of available formats
  
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  sender    User            @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  chat      Chat            @relation(fields: [chatId], references: [id], onDelete: Cascade)
  replyTo   Message?        @relation("MessageReply", fields: [replyToId], references: [id])
  replies   Message[]       @relation("MessageReply")
  reactions Reaction[]
  pinnedBy  PinnedMessage[]

  @@index([chatId])
  @@index([senderId])
  @@index([createdAt])
  @@index([scheduledFor])
  @@index([mentions])
  @@index([hashtags])
  @@index([stickerId])
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE
  VOICE
  SYSTEM
  GIF
  STICKER
}

model Call {
  id             String     @id @default(uuid())
  chatId         String
  initiatorId    String
  type           CallType
  status         CallStatus @default(CALLING)
  isRecording    Boolean    @default(false)
  recordingUrl   String?
  startedAt      DateTime   @default(now())
  endedAt        DateTime?

  chat         Chat              @relation(fields: [chatId], references: [id], onDelete: Cascade)
  initiator    User              @relation("CallInitiator", fields: [initiatorId], references: [id], onDelete: Cascade)
  participants CallParticipant[]

  @@index([chatId])
  @@index([status])
}

enum CallType {
  AUDIO
  VIDEO
}

enum CallStatus {
  CALLING
  ACTIVE
  ENDED
  MISSED
  DECLINED
}

model CallParticipant {
  id       String    @id @default(uuid())
  callId   String
  userId   String
  joinedAt DateTime  @default(now())
  leftAt   DateTime?

  call Call @relation(fields: [callId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([callId, userId])
  @@index([callId])
  @@index([userId])
}

model Contact {
  id        String   @id @default(uuid())
  userId    String
  contactId String
  nickname  String?
  createdAt DateTime @default(now())

  user    User @relation("UserContacts", fields: [userId], references: [id], onDelete: Cascade)
  contact User @relation("ContactUser", fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([userId, contactId])
  @@index([userId])
}

model Reaction {
  id        String   @id @default(uuid())
  messageId String
  userId    String
  emoji     String
  createdAt DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
  @@index([messageId])
  @@index([userId])
}

model BlockedUser {
  id        String   @id @default(uuid())
  userId    String
  blockedId String
  createdAt DateTime @default(now())

  user    User @relation("BlockingUser", fields: [userId], references: [id], onDelete: Cascade)
  blocked User @relation("BlockedUser", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([userId, blockedId])
  @@index([userId])
  @@index([blockedId])
}

model ChatSettings {
  id                String   @id @default(uuid())
  userId            String
  chatId            String
  isMuted           Boolean  @default(false)
  isFavorite        Boolean  @default(false)
  isArchived        Boolean  @default(false)
  folderId          String?
  unreadCount       Int      @default(0)
  lastReadMessageId String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat   Chat    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  folder Folder? @relation(fields: [folderId], references: [id], onDelete: SetNull)

  @@unique([userId, chatId])
  @@index([userId])
  @@index([chatId])
  @@index([folderId])
  @@index([isFavorite])
  @@index([isArchived])
}

model Folder {
  id        String   @id @default(uuid())
  userId    String
  name      String
  color     String?
  icon      String?
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatSettings ChatSettings[]

  @@index([userId])
  @@index([order])
}

model PinnedMessage {
  id        String   @id @default(uuid())
  userId    String
  messageId String
  chatId    String
  pinnedAt  DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  chat    Chat    @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([userId, messageId, chatId])
  @@index([userId])
  @@index([messageId])
  @@index([chatId])
}

model StickerPack {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  description String?
  thumbnail   String?
  isPublic    Boolean   @default(true)
  creatorId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  stickers Sticker[]

  @@index([slug])
  @@index([creatorId])
  @@index([isPublic])
}

model Sticker {
  id        String   @id @default(uuid())
  packId    String
  emoji     String?
  imageUrl  String
  width     Int
  height    Int
  order     Int      @default(0)
  createdAt DateTime @default(now())

  pack StickerPack @relation(fields: [packId], references: [id], onDelete: Cascade)

  @@index([packId])
}

model Bot {
  id          String    @id @default(uuid())
  username    String    @unique
  displayName String
  description String?
  avatar      String?
  token       String    @unique
  isActive    Boolean   @default(true)
  isInline    Boolean   @default(false)
  ownerId     String
  webhookUrl  String?
  
  // Analytics
  messagesSent Int       @default(0)
  messagesReceived Int   @default(0)
  uniqueUsers  Int       @default(0)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  commands BotCommand[]
  webhooks Webhook[]
  inlineKeyboards BotInlineKeyboard[]
  analytics BotAnalytics[]

  @@index([token])
  @@index([username])
  @@index([ownerId])
  @@index([isActive])
}

model BotCommand {
  id          String   @id @default(uuid())
  botId       String
  command     String
  description String
  createdAt   DateTime @default(now())

  bot Bot @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@unique([botId, command])
  @@index([botId])
}

model Webhook {
  id          String       @id @default(uuid())
  botId       String
  url         String
  events      String[]
  isActive    Boolean      @default(true)
  secret      String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  bot          Bot           @relation(fields: [botId], references: [id], onDelete: Cascade)
  deliveries   WebhookDelivery[]

  @@index([botId])
  @@index([isActive])
}

model WebhookDelivery {
  id          String   @id @default(uuid())
  webhookId   String
  event       String
  payload     String
  status      Int
  response    String?
  attempts    Int      @default(0)
  deliveredAt DateTime @default(now())

  webhook Webhook @relation(fields: [webhookId], references: [id], onDelete: Cascade)

  @@index([webhookId])
  @@index([deliveredAt])
}

model TelegramChatBridge {
  id                String   @id @default(uuid())
  userId            String
  stogramChatId     String
  telegramChatId    String
  telegramChatType  String
  isActive          Boolean  @default(true)
  syncDirection     SyncDirection @default(BIDIRECTIONAL)
  lastSyncAt        DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  syncedMessages TelegramMessageSync[]

  @@unique([stogramChatId, telegramChatId])
  @@index([userId])
  @@index([stogramChatId])
  @@index([telegramChatId])
  @@index([isActive])
}

enum SyncDirection {
  TELEGRAM_TO_STOGRAM
  STOGRAM_TO_TELEGRAM
  BIDIRECTIONAL
}

model TelegramMessageSync {
  id                String   @id @default(uuid())
  bridgeId          String
  stogramMessageId  String?
  telegramMessageId String
  direction         String
  syncedAt          DateTime @default(now())

  bridge TelegramChatBridge @relation(fields: [bridgeId], references: [id], onDelete: Cascade)

  @@unique([bridgeId, telegramMessageId])
  @@index([bridgeId])
  @@index([stogramMessageId])
  @@index([telegramMessageId])
}

model TelegramMiniAppSession {
  id                String   @id @default(uuid())
  userId            String
  telegramUserId    String
  initData          String
  initDataUnsafe    String
  queryId           String?
  platform          String?
  version           String?
  isActive          Boolean  @default(true)
  expiresAt         DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
  @@index([telegramUserId])
  @@index([queryId])
  @@index([isActive])
  @@index([expiresAt])
}

// E2E Encryption models
model ChatEncryptionKey {
  id          String   @id @default(uuid())
  chatId      String
  keyVersion  Int      @default(1)
  publicKey   String
  createdAt   DateTime @default(now())
  expiresAt   DateTime?

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@index([chatId])
  @@index([keyVersion])
}

// Security models
model SecurityLog {
  id          String   @id @default(uuid())
  userId      String
  action      String
  ipAddress   String
  userAgent   String?
  location    String?
  success     Boolean  @default(true)
  details     String?
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([ipAddress])
  @@index([createdAt])
}

model IPBlacklist {
  id          String   @id @default(uuid())
  userId      String?
  ipAddress   String
  reason      String
  expiresAt   DateTime?
  createdAt   DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([ipAddress])
  @@index([expiresAt])
}

model SpamReport {
  id          String   @id @default(uuid())
  reporterId  String
  targetId    String
  targetType  String   // user, message, chat
  reason      String
  status      String   @default("pending") // pending, reviewed, actioned
  reviewedBy  String?
  reviewedAt  DateTime?
  createdAt   DateTime @default(now())

  @@index([targetId])
  @@index([targetType])
  @@index([status])
  @@index([createdAt])
}

// Bot enhancements
model BotInlineKeyboard {
  id          String   @id @default(uuid())
  botId       String
  name        String
  buttons     String   // JSON array of buttons
  createdAt   DateTime @default(now())

  bot Bot @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@index([botId])
}

model BotCallbackQuery {
  id          String   @id @default(uuid())
  botId       String
  userId      String
  messageId   String
  callbackData String
  answered    Boolean  @default(false)
  answerText  String?
  createdAt   DateTime @default(now())

  @@index([botId])
  @@index([userId])
  @@index([messageId])
  @@index([answered])
}

model BotInlineQuery {
  id          String   @id @default(uuid())
  botId       String
  userId      String
  query       String
  offset      String?
  answered    Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([botId])
  @@index([userId])
  @@index([answered])
}

// Analytics models
model BotAnalytics {
  id          String   @id @default(uuid())
  botId       String
  date        DateTime
  messagesSent Int     @default(0)
  messagesReceived Int @default(0)
  uniqueUsers Int      @default(0)
  commands    String?  // JSON object with command counts
  
  bot Bot @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@unique([botId, date])
  @@index([botId])
  @@index([date])
}

model UserAnalytics {
  id              String   @id @default(uuid())
  userId          String
  date            DateTime
  messagesSent    Int      @default(0)
  messagesReceived Int     @default(0)
  callsMade       Int      @default(0)
  callsReceived   Int      @default(0)
  activeMinutes   Int      @default(0)
  
  @@unique([userId, date])
  @@index([userId])
  @@index([date])
}

model SystemAnalytics {
  id              String   @id @default(uuid())
  date            DateTime @unique
  totalUsers      Int      @default(0)
  activeUsers     Int      @default(0)
  totalMessages   Int      @default(0)
  totalCalls      Int      @default(0)
  totalStorage    BigInt   @default(0)
  avgResponseTime Int      @default(0)
  errorCount      Int      @default(0)
  
  @@index([date])
}

// UI/UX models
model UserTheme {
  id          String   @id @default(uuid())
  userId      String
  name        String
  colors      String   // JSON object with color scheme
  isDark      Boolean  @default(false)
  isActive    Boolean  @default(false)
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Performance optimization
model MessageCache {
  id          String   @id @default(uuid())
  chatId      String
  messageIds  String   // JSON array of recent message IDs
  lastUpdate  DateTime @default(now())
  
  @@unique([chatId])
  @@index([chatId])
  @@index([lastUpdate])
}
